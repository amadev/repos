* repos

`repos` is a CLI tool that helps to manage multiple git repositories.

** Installation

#+BEGIN_SRC sh
git clone https://github.com/amadev/repos.git && cd repos && sudo ./install.sh
#+END_SRC

** Basic operations

Add some repositories with `repos add` command.

#+BEGIN_SRC sh
repos add https://review.opendev.org/openstack/nova
repos add https://review.opendev.org/openstack/cinder
#+END_SRC

Repository names must be unique. By default the last segment of
repository path used as a name, so conflict could happen.
To overcome, use the `--name` option.

The following basic operations are available.

#+BEGIN_SRC sh
repos list
repos pull
#+END_SRC

Repositories could be organized hierarchically into groups and
operations can be issued on a particular group only. The most useful
way of using groups is a `search` operation that helps to search on
multiples repositories not depending on a path they were cloned.

#+BEGIN_SRC sh
repos search --group qemu needle -- --ignore tests
#+END_SRC

The search backend could be changed with a 'search_command` config option.

** `repos sync`

A `repos sync` command pulls and pushes repositories to make sure
everything is synchronized. As a pure man dropbox alternative, you can
mark your repo with `auto-commit` tag like `repos add ... --tags
auto-commit` and `repos sync` will auto-commit changes in the
repository, pull changes from upstream and push resulting set to
upstream. Surely this may be applied to a specific group only.

** Group hierarchy

With `--group` and `--parent` options, repositories can be easily
organized into a hierarchy.

#+BEGIN_SRC sh
repos add-group group-1
repos add repo-1 --group group-1
repos add-group group-1.1 --parent group-1
repos add repo-1.1 --group group-1.1
#+END_SRC

Group names must be unique. Be careful with circular dependencies.

** Config options

Config by default resided in $HOME/.repos/conf.yaml.

- db: path where `repos` db yaml stored;
- groups: path to group hierarchy symlinks;
- search_command - a template for command, `grep -HRin` by default,
  but `ag -f --search-files` recommended;
- repos_default_directory - all repositories without `--path` specification
  will be cloned here;
- log - path to a log file.

** Repository tags

- auto-commit - for `repos sync` command it will stage all changes and
  commit them;
- shallow - quick clone for big repositories pushing is not planned
  from.

** Gerrit repositories download

`repos gerrit <url>` generates a database file can be used later with `repos` commands to download
all gerrit projects hierarchy.

First, let's create a new config file and export its path as an env
variable.

#+BEGIN_SRC sh
cat << 'EOF' > ~/.repos/mcp-config.yaml
db: $HOME/.repos/mcp-db.yaml
groups: $HOME/.repos/mcp-groups/
search_command: ag -f --search-files
repos_default_directory: $HOME/src/mcp/
EOF

export REPOS_CONFIG=~/.repos/mcp-config.yaml
#+END_SRC

Then download gerrit project and convert them into a `repos` DB
format. As Gerrit may require authentication an additional http
headers could be provided.

#+BEGIN_SRC sh
repos gerrit \
  https://gerrit.mcp.mirantis.com/ \
  ssh://$USER@gerrit.mcp.mirantis.com:29418/ --headers \
  "Cookie: <cookie-value-here>" \
  > $HOME/.repos/mcp-db.yaml
#+END_SRC

And last step is to make pull.

#+BEGIN_SRC sh
repos pull
#+END_SRC

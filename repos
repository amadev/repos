#!/usr/bin/env joker
;; #-*- mode: clojure; target-shell-session: "shell-joker" -*-

(ns script
  (:require [joker.tools.cli :as cli])
  (:require [joker.os :as os])
  (:require [joker.string :as str])
  (:require [src.repos.core :as r]))

(defn parse-headers
  [headers]
  (when headers
    (into {} (map #(str/split % #":") (str/split-lines headers)))))

(defn parse-tags
  [v]
  (let [v (keyword v)]
   (when-not (#{:shallow :auto-commit} v)
     (throw (ex-info "Invalid tag" {:cause "Tag should be shallow or auto-commit"})))
   [v]))

(def *program* "repos")
(def *version* [0 1 0])
(def *actions*
  [["add" "Add a new repository to DB"]
   ["add-group" "Add a new repository group to DB"]
   ["list" "Show structure of repositories"]
   ["pull" "Clone or update all specified repositories"]
   ["search" "Seacrh for text in a group of repositories"]
   ["sync" "Pull and then push repositories"]
   ["gerrit" "Generate db file for repos from Gerrit API"]
   ["dump" "Dump json structure"]
   ])
(def *opts*
  [["-v" "--verbose" :default 0 :update-fn inc]
   ["-h" "--help" "Show this summary"]
   ["-p" "--path" "New repository clone path" :required true]
   ["-g" "--group" "Group name allows to filter repository list" :required true]
   [nil "--headers" "Additional headers for the gerrit command if authentication required"
    :required true :parse-fn parse-headers]
   ["-n" "--name" "Repository name" :required true]
   ["-t" "--tags" "Repository tag" :required true :parse-fn parse-tags]
   [nil "--parent" "Parent group name" :required true]])

(defn usage
  [summary errors]
  (printf "usage: %s [options] action\n" *program*)
  (printf "ACTIONS\n\n")
  (doseq [action *actions*]
    (printf "  %s\t\t%s\n" (first action) (second action)))
  (println)
  (printf "OPTIONS\n\n")
  (println summary)
  (when errors
    (println "\nErrors:")
    (run! println errors)))

(defn parse-opts
  [args]
  (let [[args-no-rest _ rest-args] (partition-by #(= % "--") args)
        parsed (cli/parse-opts args-no-rest *opts*)
        args-ok? ((set (map first *actions*)) (first (:arguments parsed)))
        parsed (assoc
                parsed
                :errors (if args-ok?
                          (:errors parsed)
                          (conj (:errors parsed) "Must specify one available action")))
        parsed (assoc-in parsed [:options :rest-args] rest-args)]
    (when (<= 2 (-> parsed :options :verbose))
      (println "parsed" (dissoc parsed :summary)))
    parsed))

(let [{:keys [options arguments summary errors]} (parse-opts *command-line-args*)]
  (cond
    (or errors (:help options))
    (do
      (usage summary errors)
      (when errors
        (os/exit -1)))
    :else
    (try
      (r/main arguments options)
      (catch Error e
        (if (ex-message e)
          (printf "Error: %s\nCause: %s\nTry verbose for more details\n"
                  (ex-message e)
                  (:cause (ex-data e)))
          (printf "Error: %s\n" e))
        (os/exit 1)))))

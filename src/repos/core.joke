;; #-*- mode: clojure; target-shell-session: "shell-joker" -*-

(ns src.repos.core
  (:require [joker.os :as os])
  (:require [joker.yaml :as yaml])
  (:require [joker.string :as str])
  (:require [joker.time :as time])
  (:require [joker.filepath :as filepath])
  (:require [joker.set :as jset]))

(def *context* {})
(def *levels* [:debug :info :error])

(declare debug)
(declare ex)

;; === utils ===

(defn dir?
  [path]
  (try
    (:dir? (os/stat path))
    (catch Error e
      false)))

(defmacro in-dir
  [dir & body]
  `(let [save-dir# (os/cwd)]
     (debug "chdir" ~dir)
     (os/chdir ~dir)
     ~@body
     (os/chdir save-dir#)))

(defn index
  [i v]
  (ffirst (filter #(= (second %) i) (map-indexed vector v))))

(defn ex
  [& args]
  (let [args (filter (complement empty?) args)
        s-args (str/join " " args)]
    (debug "call:" s-args)
    (let [r (os/exec (first args) {:args (rest args)})]
      (debug "result:" r)
      (when-not (:success r)
        (throw (ex-info "Exec failed"
                        {:cause (str/trim (str/join "\n" [(:out r) (:err r)]))})))
      r
      )))

(defn walk
  ;; todo: recur
  [data key-func val-func & [path]]
  (cond
    (or (list? data) (vector? data))
    (mapv #(walk %1 key-func val-func (apply str [path ".[]"])) data)
    (map? data)
    (into {} (for [[k v] data] [(key-func k) (walk v key-func val-func (apply str [path "." k]))]))
    :else
    (val-func data path)))

(defn expand-env
  [s]
  ;; the func would be much easier if str/replace could suport repl arg as func
  ;; todo: joker issue
  (let [s (str s)]
    (loop [replaces (map #(list %1 (get (:env *context*) (apply str (rest %1)) "")) (re-seq #"\$[A-Z0-9_]+" s))
           s s]
      (if (empty? replaces)
        s
        (let [pair (first replaces)
              from (first pair)
              to (second pair)]
          (recur (rest replaces) (str/replace s from to)))))))

(defn process-yaml-value
  [v p]
  (if (str/ends-with? (str p) "tags.[]")
    (keyword v)
    (expand-env v)))

(defn prepare-value-for-yaml
  [v p]
  (if (str/ends-with? p "tags.[]") (name v) v))

(defn read-yaml
  [path]
  (when-not path
    (throw (ex-info "Trying read yaml from empty path"
                    {:cause "Most likely it's empty config file with no DB specified"})))
  (let [data (yaml/read-string (slurp path))]
    (walk data keyword process-yaml-value)))

(defn indent
  [n]
  (apply str (take (* n 2) (repeat " "))))

(defn serialize-aux
  ;; todo: recur
  [data level]
  (let [level (or level 0)]
    (cond
      (or (vector? data) (list? data))
      (doseq [v data]
        (if (or (map? v) (vector? v) (list? v))
          (do
            (printf "%s-\n" (indent level))
            (serialize-aux v (inc level)))
          (printf "%s- %s\n" (indent level) (str v))))
      (map? data)
      (doseq [[k v] data]
        (if (and (or (map? v) (vector? v) (list? v)) (not (empty? v)))
          (do
            (printf "%s%s:\n" (indent level) (str k))
            (serialize-aux v (inc level)))
          (printf "%s%s: %s\n" (indent level) (str k) (str v))))
      :else (printf "%s%s\n" (indent level) (str data)))))

(defn serialize
  [data]
  (with-out-str (serialize-aux data 0)))

(defn write-yaml
  [data & [path]]
  (let [data (walk data name prepare-value-for-yaml)
        s (serialize data)]
    (if path (spit path s) s)))

;; === logs ===

(defn write
  [path string]
  ;; todo: didn't find the proper way to append string to file in joker
  (ex "bash" "-c" (format "echo '%s' >> %s" string path)))

(defn log
  [message level]
  (when (>= (index level *levels*) (index (:log_level *context* :debug) *levels*))
    (println (format "[%s] %s %s"
                     (apply str (-> level str str/upper-case rest))
                     (time/format (time/now) time/rfc3339)
                     message))))

;; todo: generate log funcs dynamically
(defn debug
  [message & args]
  (log (apply str (interpose " " (cons message args))) :debug))

(defn info
  [message & args]
  (log (apply str (interpose " " (cons message args))) :info))

(defn error
  [message & args]
  (log (apply str (interpose " " (cons message args))) :error))

;; === logic ===

(defn reload-branches
  [repo]
  (in-dir (:path repo)
          (doseq [r (rest (:remotes repo))]
            (do
              (try
                (ex "git" "remote" "add" (:name r) (:url r))
                (catch Error e
                  (when-not (str/index-of (:cause (ex-data e)) "already exists")
                    (throw (ex-info (ex-message e) (ex-data e))))))
              (ex "git" "fetch" (:name r))))
          (doseq [b (rest (:branches repo))]
            (try
              (ex "git" "checkout" "-b" (:name b) "--track" (format "%s/%s" (:remote b) (:refspec b)))
              (catch Error e
                (when-not (str/index-of (:cause (ex-data e)) "already exists")
                  (throw (ex-info (ex-message e) (ex-data e)))))))))

(defn update-config
  [repo]
  (in-dir
   (:path repo)
   (doseq [c (:config repo)]
     (try
       (ex "git" "config" "--unset-all" (:name c))
       (catch Error e))
     (let [values (if (sequential? (:value c)) (:value c) (list (:value c)))]
       (doseq [v values]
         (ex "git" "config" "--add" (:name c) v)))
     )))

(defn pull-aux
  [repo]
  (if (not (dir? (:path repo)))
    ;; clone
    (do
      (info "clone" (:name repo))
      (ex "git" "clone"
          (if (some #(= % :shallow) (:tags repo)) "--depth=1" "")
          (format "--origin=%s" (-> repo :remotes first :name))
          (format "--branch=%s" (-> repo :branches first :name))
          (-> repo :remotes first :url)
          (:path repo)))
    ;; pull
    (in-dir
     (:path repo)
     (info "pull" (:name repo))
     (reload-branches repo)
     (doseq [b (:branches repo)]
       (ex "git" "checkout" (:name b))
       (ex "git" "pull" "--rebase" (:remote b) (:refspec b)))))
  (update-config repo))

(defn pull
  [repo]
  (try
    (pull-aux repo)
    (catch Error e
      (when-not (str/index-of (:cause (ex-data e)) "Could not find remote branch master to clone")
        (throw (ex-info (ex-message e) (ex-data e)))))))

(defn repo
  ([url] (repo url {}))
  ([url options]
   (let [name (or (:name options) (joker.filepath/base url))
         path (or (:path options) (str/join "" [(or (:default_dir *context*) (expand-env "$HOME/src/")) name]))
         remotes [{:name "origin" :url url}]
         remotes (if (:remotes options) (concat remotes (:remotes options)) remotes)
         branches [{:name "master" :remote "origin" :refspec "master"}]
         branches (if (:branches options) (concat branches (:branches options)) branches)]
     (info "add a repo" name "to" path)
     {:name name
      :path path
      :group (or (:group options) (:default_group *context*) "root")
      :tags (or (:tags options) [])
      :remotes remotes
      :branches branches})))

(defn get-group
  [db name]
  (filter #(= (:name %) name) (:groups db)))

(defn get-repo
  [db name]
  (filter #(= (:name %) name) (:repos db)))

(defn add-repo
  [db db-path url options]
  (let [new-repo (repo url options)]
    (when (empty? (get-group db (:group new-repo)))
      (throw (ex-info (format "Group is not found")
                      {:cause (format (str "`repos` failed to find group \"%s\" while adding "
                                           "a new repo, try to add with `repos add-group %s`")
                                      (:group new-repo) (:group new-repo))})))
    (when-not (empty? (get-repo db (:name new-repo)))
      (throw (ex-info (format "Repo already exists")
                      {:cause (format (str "Repo with name \"%s\" already exists. "
                                           "Use `repos -n <new-name>` to set other name")
                                      (:name new-repo))})))
    (write-yaml
     (assoc db :repos (conj (:repos db) new-repo))
     db-path)))

(defn get-group-path
  [group groups]
  (let [group-dict (into {} (for [g groups] [(:name g) (:parent g)]))]
    (loop [group group
           result []]
      (if (not (= :not-exists (get group-dict group :not-exists)))
        (if (not (group-dict group))
          (str/join "/" (reverse (conj result group)))
          (recur (group-dict group) (conj result group)))))))

(defn get-group-path-ex
  [group groups]
  (let [group-path (get-group-path group groups)]
      (when-not group-path
        (throw (ex-info (format "Not found path for group %s" group)
                        {:cause "Probably group hierarchy is defined incorrectly"})))
      group-path))

(defn put-repos-into-groups
  [repos groups dir]
  (info "regenerate groups")
  ;; rm -r can definetely be dangerous, let's make sure there are no files in groups dir
  (when (and (dir? dir) (empty? (:out (ex "find" dir "-type" "f"))))
    (ex "rm" "-r" dir))
  (doseq [r repos]
    (let [group-path (get-group-path-ex (:group r) groups)]
      (let [group-path-full (filepath/join dir group-path)
            repo-target-path (filepath/join group-path-full (:name r))]
        (ex "mkdir" "-p" group-path-full)
        (ex "ln" "-s" (:path r) repo-target-path)))))

(defn repo-list
  [dir]
  (when (dir? dir)
    (in-dir dir
            (println (:out (ex "bash" "-c" "find . | sed -e 's/[^-][^\\/]*\\// |/g' -e 's/|\\([^ ]\\)/|-\\1/'"))))))

(defn search
  [command search-string dir args]
  (in-dir
   dir
   (let [ex-args (concat (str/split command #" ") [search-string dir] args)]
     (try
       (println (:out (apply ex ex-args)))
       (catch Error e
         (if (empty? (:cause (ex-data e)))
           (throw (ex-info "Nothing found" (assoc (ex-data e) :cause "Search command exit code -1")))
           (throw (ex-info (ex-message e) (ex-data e)))))))))

(defn get-subgroups
  [group groups]
  (loop [subgroups (set [group])
         result #{}]
    (let [subgroups (set (map #(:name %) (filter #(subgroups (:parent %)) groups)))]
      (if (empty? subgroups)
        result
        (recur subgroups (jset/union result subgroups))))))

(defn push
  [repo]
  (info "push" (:name repo))
  (in-dir
   (:path repo)
   (doseq [b (:branches repo)]
     (ex "git" "push" (:remote b) (format "%s:%s" (:name b) (:refspec b))))))

(defn do-repos
  [repos subgroups name func]
  (doseq [r (if (not (empty? subgroups)) (filter #(subgroups (:group %)) repos) repos)]
    (if name
      (if (= name (:name r))
        (func r))
      (func r))))

(defn auto-commit
  [repo]
  (when (some #(= % :auto-commit) (:tags repo))
    (info "auto-commit" (:name repo))
    (in-dir
     (:path repo)
     (ex "git" "add" "-A")
     (try
       (ex "git" "commit" "-m" "Auto-commit")
       (catch Error e
         (when-not (str/index-of (:cause (ex-data e)) "nothing to commit")
           (throw (ex-info (ex-message e) (ex-data e)))))))))

(defn request
  [url & [params]]
  (debug "query" url)
  (let [response (joker.http/send (merge {:url url} params))]
    (debug "response" (if (< 400 (count (:body response)))
                        (assoc response :body (apply str (take 400 (:body response))))
                        response))
    (if (<= 400 (:status response))
      (throw (ex-info "http query got response status code greater or equal than 400"
                      {:cause (:body response)})))
    response)
  )

(defn gerrit
  [url clone-url options]
  (let [response (:body (request (str/join "" [url "projects/"]) {:headers (:headers options)}))
        but-first-response (apply str (rest (str/split-lines response)))
        projects (joker.json/read-string but-first-response)]
    (println
     (write-yaml
      {:repos
       (into
        []
        (for [project projects]
          (let [url (str/join "" [clone-url (first project)])
                name (str/replace (first project) "/" "-")]
            (repo url (merge {:tags [:shallow] :name name} options)))))
       :groups [{:name (or (:group options) (:default_group *context*) "root")}]}))))

(defn add-group
  [db db-path name parent]
  (get-group-path-ex parent (:groups db))
  (write-yaml
   (assoc db :groups (conj (:groups db) {:name name :parent parent}))
   db-path))

(defn init-db
  []
  {:repos [] :groups [{:name "root"}]})

(defn validate-config
  [config]
  (let [required #{:db :groups :search_command :repos_default_directory}]
    (when-not (jset/subset? required (set (keys config)))
      (throw (ex-info "Invalid configuration"
                      {:cause (format "No required keys (%s) in config file" required)}))
      )
    (when-not (os/exists? (:db config))
      (ex "mkdir" "-p" (filepath/dir (:db config)))
      (ex "touch" (:db config)))
    config))

(defn main
  [args options]
  (binding [*context* {:log_level (get (vec (reverse *levels*)) (:verbose options) :debug)
                       :env (os/env)}]
    (let [config-path (expand-env (get (:env *context*) "REPOS_CONFIG" "$HOME/.repos/config.yaml"))
          config (-> config-path read-yaml validate-config)
          db-path (:db config)
          db (read-yaml db-path)
          db (if (empty? db) (init-db) db)
          default-group (or (-> db :groups first :name)
                            (throw (ex-info "Cannot find default group"
                                            {:cause "Check DB has default group"})))
          groups-dir (:groups config)
          current-group-path (filepath/join groups-dir (str (get-group-path (:group options) (:groups db))))
          subgroups (set (filter some? (concat [(:group options)] (get-subgroups (:group options) (:groups db)))))
          current-repo-path (:path (first (filter #(= (:name %) (:name options)) (:repos db))))]
      (binding [*context* (->
                           *context*
                           (assoc-in [:default_dir] (:repos_default_directory config))
                           (assoc-in [:default_group] default-group))]
        (debug "db-path" db-path)
        (debug "current-group-path" current-group-path)
        (debug "current-repo-path" current-repo-path)
        (debug "default-group" default-group)
        (debug "subgroups" subgroups)
        ;; to allow group conf update via DB file it's issued everytime
        ;; group tree in file system corresponds to config always
        ;; some link to repo may be broken due to repo is not pulled yet
        ;; groups without repos will not be created
        (put-repos-into-groups (:repos db) (:groups db) groups-dir)
        (case (first args)
          "pull" (do-repos (:repos db) subgroups (:name options) (partial pull))
          ;; todo: check agrs number for each action
          "add" (add-repo db db-path (second args) options)
          "list" (repo-list current-group-path)
          "search" (search
                    (:search_command config)
                    (second args)
                    (or current-repo-path current-group-path)
                    (:rest-args options))
          "sync" (do
                   (do-repos (:repos db) subgroups (:name options) (partial auto-commit))
                   (do-repos (:repos db) subgroups (:name options) (partial pull))
                   (do-repos (:repos db) subgroups (:name options) (partial push)))
          "gerrit" (gerrit (second args) (nth args 2) options)
          "add-group" (add-group db db-path (second args) (or (:parent options) default-group))))
      )))
